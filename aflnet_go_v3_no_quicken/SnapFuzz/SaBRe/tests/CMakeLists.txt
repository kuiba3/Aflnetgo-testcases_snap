# Copyright Â© 2019 Software Reliability Group, Imperial College London
#
# This file is part of SaBRe.
#
# SPDX-License-Identifier: GPL-3.0-or-later

set (LIT_AUTOGENERATED_WARNING "This file is autogenerated, do not edit!")

set(SABRE_AVAILABLE_TEST_FEATURES "")
macro(ADD_TEST_FEATURE feature)
  list(APPEND SABRE_AVAILABLE_TEST_FEATURES "\"${feature}\"")
endmacro(ADD_TEST_FEATURE)

if(RDTSC)
  ADD_TEST_FEATURE(rdtsc)
endif()

macro(FIND_TEST_FEATURE prog)
  string(TOUPPER "${prog}" p)
  cmake_parse_arguments("TEST_FEATURE_${p}" "REQUIRED" "" "" ${ARGN})
  find_program("TEST_${p}_PATH" ${prog})
  if(NOT TEST_${p}_PATH)
    if(TEST_FEATURE_${p}_REQUIRED)
      message(FATAL_ERROR "Required test dependency \"${prog}\" not found")
    else()
      message(AUTHOR_WARNING "Optional test dependency \"${prog}\" not found")
    endif()
  else()
    if (NOT TEST_FEATURE_${p}_REQUIRED)
      ADD_TEST_FEATURE(${prog})
    endif()
  endif()

  # Hide programs from cmake cache
  mark_as_advanced("TEST_${p}_PATH")
endmacro(FIND_TEST_FEATURE)

include(CheckCCompilerFlag)
include(CMakePushCheckState)
CMAKE_PUSH_CHECK_STATE(RESET)
SET(CMAKE_REQUIRED_FLAGS "-fsanitize=thread") # Also needs to be a link flag for test to pass
CHECK_C_COMPILER_FLAG("-fsanitize=thread" tsan_avail)
CMAKE_POP_CHECK_STATE()
if(NOT tsan_avail)
  message(AUTHOR_WARNING "ThreadSanitizer is not supported by the system compiler")
else()
  ADD_TEST_FEATURE(tsan)
endif()

check_c_compiler_flag("-no-pie" no_pie)

FIND_TEST_FEATURE(bash REQUIRED)
FIND_TEST_FEATURE(timeout REQUIRED)
FIND_TEST_FEATURE(gcc REQUIRED)

FIND_TEST_FEATURE(clang)

FIND_TEST_FEATURE(bunzip2)
FIND_TEST_FEATURE(bzip2)
FIND_TEST_FEATURE(cat)
FIND_TEST_FEATURE(chacl)
FIND_TEST_FEATURE(chgrp)
FIND_TEST_FEATURE(chmod)
FIND_TEST_FEATURE(cp)
FIND_TEST_FEATURE(date)
FIND_TEST_FEATURE(dbus-uuidgen)
FIND_TEST_FEATURE(dd)
FIND_TEST_FEATURE(dmesg)
FIND_TEST_FEATURE(dumpkeys)
FIND_TEST_FEATURE(ed)
FIND_TEST_FEATURE(efibootmgr)
FIND_TEST_FEATURE(fgconsole)
FIND_TEST_FEATURE(fuser)
FIND_TEST_FEATURE(grep)
FIND_TEST_FEATURE(gzip)
FIND_TEST_FEATURE(ip)
FIND_TEST_FEATURE(kill)
FIND_TEST_FEATURE(kmod)
FIND_TEST_FEATURE(lessecho)
FIND_TEST_FEATURE(ln)
FIND_TEST_FEATURE(loginctl)
FIND_TEST_FEATURE(ls)
FIND_TEST_FEATURE(lsmod)
FIND_TEST_FEATURE(mktemp)
FIND_TEST_FEATURE(mount)
FIND_TEST_FEATURE(nano)
FIND_TEST_FEATURE(nc)
FIND_TEST_FEATURE(ntfs-3g)
FIND_TEST_FEATURE(openvt)
FIND_TEST_FEATURE(ping)
FIND_TEST_FEATURE(ps)
FIND_TEST_FEATURE(sed)
FIND_TEST_FEATURE(setfacl)
FIND_TEST_FEATURE(su)
FIND_TEST_FEATURE(tar)

string(REPLACE ";" "," SABRE_AVAILABLE_TEST_FEATURES_STR
  "${SABRE_AVAILABLE_TEST_FEATURES}")
configure_file("lit.cfg.in" "${CMAKE_CURRENT_BINARY_DIR}/lit.cfg" @ONLY)


if(no_pie)
  # foreach(link "" "-static") # SaBRe 2.0 doesn't support static ELFs
  foreach(link "")
    foreach(pie "-no-pie" "-pie")
      configure_file("ld/test.c.in" "${CMAKE_CURRENT_BINARY_DIR}/ld/test_${link}_${pie}.c" @ONLY)
    endforeach(pie)
  endforeach(link)

  configure_file("ld/lit.cfg.in" "${CMAKE_CURRENT_BINARY_DIR}/ld/lit.cfg" @ONLY)
endif(no_pie)

file(GLOB_RECURSE smoketests CONFIGURE_DEPENDS "smoke/*.in")
# We don't want to configure lit.cfg.in as a test, but just as a
# config so exclude it now and deal with more simply later
list(REMOVE_ITEM smoketests "${CMAKE_CURRENT_SOURCE_DIR}/smoke/lit.cfg.in")
foreach(test ${smoketests})
  get_filename_component(test_name ${test} NAME_WE)
  foreach(tool "id" "sbrtrace" "fault-injector")
    configure_file(${test}
      "${CMAKE_CURRENT_BINARY_DIR}/smoke/test_${tool}_${test_name}.c"
      @ONLY)
  endforeach(tool)
endforeach(test)

configure_file("smoke/lit.cfg.in" "${CMAKE_CURRENT_BINARY_DIR}/smoke/lit.cfg" @ONLY)

add_custom_target(smoketests lit -v --timeout 30 "${CMAKE_CURRENT_BINARY_DIR}/smoke")
add_dependencies(smoketests sabre sbr-id sbr-trace sbr-scfuzzer)

add_custom_target(tests lit -v --timeout 30 "${CMAKE_CURRENT_BINARY_DIR}")
add_dependencies(tests sabre sbr-id sbr-trace sbr-scfuzzer process-vdso)
